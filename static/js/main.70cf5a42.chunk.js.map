{"version":3,"sources":["adapter/tree-sitter/helper.ts","adapter/tree-sitter/base.ts","adapter/tree-sitter/loader.ts","adapter/tree-sitter/language/cpp.ts","component/TreeEditor.tsx","component/MainApp.tsx","reportWebVitals.ts","index.tsx"],"names":["nodeToMarker","node","message","startLineNumber","startPosition","row","startColumn","column","endLineNumber","endPosition","endColumn","severity","monaco","Error","generateErrorMarker","cur","isMissing","type","hasError","children","flatMap","BaseLSP","editor","parser","language","model","tree","this","getModel","parse","getValue","e","changes","forEach","change","r","range","start","getStartPosition","oldend","getEndPosition","newend","p","text","lines","split","length","delta","lineNumber","pop","appendPoint","edit","startIndex","rangeOffset","oldEndIndex","getOffsetAt","newEndIndex","convert","oldEndPosition","newEndPosition","markers","rootNode","setModelMarkers","a","updateMarker","onDidChangeModelContent","updateTree","cdnURL","map","Map","createLSP","Parser","init","Language","load","parserLanguage","setLanguage","get","TreeEditor","props","state","lsp","setValue","height","defaultLanguage","onMount","handleEditorDidMount","bind","theme","options","React","Component","MainApp","onReady","console","log","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70cf5a42.chunk.js","sourcesContent":["import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport Parser from 'web-tree-sitter';\n\n/**\n * Generate a Monaco Error Marker\n * with range equal to node range\n */\nfunction nodeToMarker(node: Parser.SyntaxNode, message: string): monaco.editor.IMarkerData{\n  return {\n    startLineNumber: node.startPosition.row + 1,\n    startColumn: node.startPosition.column + 1,\n    endLineNumber: node.endPosition.row + 1,\n    endColumn: node.endPosition.column + 1,\n    message: message,\n    severity: monaco.MarkerSeverity.Error\n  };\n}\n\n/**\n * Generate error message for errors in the tree-sitter AST\n */\nexport function generateErrorMarker(cur: Parser.SyntaxNode): monaco.editor.IMarkerData[] {\n  if (cur.isMissing()) return [nodeToMarker(cur, `Missing ${cur.type}`)];\n  else if (cur.type === 'ERROR') return [nodeToMarker(cur, 'ERROR')];\n  else if (cur.hasError()) return cur.children.flatMap(generateErrorMarker);\n  else return [];\n}\n","import { Monaco } from '@monaco-editor/react';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport Parser from 'web-tree-sitter';\nimport { generateErrorMarker } from './helper';\n\n/**\n * Use a bit of OOP to reduce code repetition\n */\nexport class BaseLSP {\n  editor: monaco.editor.IStandaloneCodeEditor\n  model: monaco.editor.ITextModel\n  monaco: Monaco\n  parser: Parser\n  language: Parser.Language\n  tree: Parser.Tree\n\n  constructor(\n    editor: monaco.editor.IStandaloneCodeEditor,\n    monaco: Monaco,\n    parser: Parser,\n    language: Parser.Language\n  ) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.model = editor.getModel()!;\n    this.editor = editor;\n    this.monaco = monaco;\n    this.parser = parser;\n    this.language = language;\n    this.tree = this.parser.parse(this.editor.getValue());\n  }\n\n  updateTree(e: monaco.editor.IModelContentChangedEvent): void{\n    e.changes.forEach(change => {\n      const r = change.range as monaco.Range;\n      const start = r.getStartPosition();\n      const oldend = r.getEndPosition();\n      const newend = appendPoint(start, change.text);\n      this.tree.edit({\n        startIndex: change.rangeOffset,\n        oldEndIndex: this.model.getOffsetAt(oldend),\n        newEndIndex: change.rangeOffset + change.text.length,\n        startPosition: convert(start),\n        oldEndPosition: convert(oldend),\n        newEndPosition: convert(newend)\n      });\n    });\n    this.tree = this.parser.parse(this.editor.getValue());\n    //console.log(this.tree.rootNode.toString());\n  }\n\n  updateMarker(): void {\n    const markers = generateErrorMarker(this.tree.rootNode);\n    this.monaco.editor.setModelMarkers(this.model, 'owner', markers);\n  }\n\n  async init(): Promise<void> {\n    this.updateMarker();\n    this.editor.onDidChangeModelContent(e => {\n      this.updateTree(e);\n      this.updateMarker();\n    });\n  }\n}\n\n/**\n * Given (row,monaco) in monaco coordiniate\n * Return coordinate after appending text\n */\nfunction appendPoint(p:monaco.Position, text:string): monaco.Position{\n  const lines = text.split('\\n');\n  if (lines.length === 1) return p.delta(0,text.length);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  else return new monaco.Position(p.lineNumber + lines.length - 1, lines.pop()!.length + 1);\n}\n\n/**\n * Given (row,column) in monaco coordinate\n * Return the coordinate in parser coordinate\n */\nfunction convert(p: monaco.IPosition): Parser.Point {\n  return {\n    row: p.lineNumber-1,\n    column: p.column-1\n  };\n}","import { Monaco } from '@monaco-editor/react';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport Parser from 'web-tree-sitter';\nimport { BaseLSP } from './base';\nimport { CppLSP } from './language/cpp';\n\nconst cdnURL = 'https://tree-sitter.github.io/';\nexport type EditorLanguage = 'cpp' | 'python';\nconst map = new Map<string, typeof BaseLSP>([\n  ['cpp', CppLSP],\n  ['python', BaseLSP]\n]);\n\n\nexport async function createLSP(\n  language: EditorLanguage,\n  editor: monaco.editor.IStandaloneCodeEditor,\n  monaco: Monaco\n):Promise<BaseLSP>{\n  await Parser.init();\n  const parser = new Parser();\n  const parserLanguage = await Parser.Language.load(cdnURL + 'tree-sitter-' + language + '.wasm');\n  parser.setLanguage(parserLanguage);\n\n  return new (map.get(language) || BaseLSP)(\n    editor,\n    monaco,\n    parser,\n    parserLanguage\n  );\n}","import { BaseLSP } from '../base';\n\nexport class CppLSP extends BaseLSP{\n  async init():Promise<void>{\n    await super.init();\n  }\n}","import Editor, { Monaco } from '@monaco-editor/react';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport React from 'react';\nimport { createLSP, EditorLanguage } from '../adapter/tree-sitter/loader';\nimport './TreeEditor.css';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface EditorProps{\n  language: EditorLanguage,\n  options: monaco.editor.IStandaloneEditorConstructionOptions | undefined\n  onReady: (editor: TreeEditor)=>void\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface EditorState{\n  props: EditorProps\n}\n\nconst code = `#include<iostream>\nusing namespace std;\n\nint main(){\n\n}\n`;\n\nexport class TreeEditor extends React.Component<EditorProps,EditorState>{\n  constructor(props: EditorProps) {\n    super(props);\n    this.state = {\n      props: props\n    };\n  }\n\n  async handleEditorDidMount(editor: monaco.editor.IStandaloneCodeEditor, monaco: Monaco): Promise<void> {\n    const lsp = await createLSP(this.props.language,editor,monaco);\n    await lsp.init();\n    editor.setValue(code);\n  }\n\n  render(): JSX.Element {\n    return <Editor\n      height=\"90vh\"\n      defaultLanguage={this.props.language}\n      onMount={this.handleEditorDidMount.bind(this)}\n      theme='light'\n      options={this.props.options}\n      //wrapperClassName=\"MainApp-code\"\n    />;\n  }\n}","import React from 'react';\nimport { TreeEditor } from './TreeEditor';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface AppProps {\n  //language: EditorLanguage\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface AppState {\n}\n\n\nexport class MainApp extends React.Component<AppProps, AppState>{\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {};\n  }\n\n  render(): JSX.Element {\n    return <TreeEditor\n      language='cpp'\n      onReady={e=>console.log(e)}\n      options={{\n        fontSize: 18\n      }}\n    />;\n  }\n}","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MainApp } from './component/MainApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}